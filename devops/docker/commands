Use:
----
docker desktop
play with docker

docker --version



docker run -it --rm ubuntu

With the preceding command, we ask Docker to create a container that runs Ubuntu, based on the latest version that's 
available of the official Docker image for Ubuntu. The -it option is used so that we can interact with the container 
using Terminal, and the --rm option tells Docker to remove the container once we exit 
the Terminal session; otherwise, the container will remain in the Docker engine with an Exited state.

docker ps -a //Check process

docker rm -f $(docker ps -aq)// Remove all containers
The docker rm -f command stops and removes the containers whose container IDs are specified to the command. The docker ps -aq command lists the container IDs of all the running and stopped containers in the Docker engine. The -q option reduces the output from the docker ps command so that it only lists the container IDs.



Spcific to know core and memory:
---------------------------------
echo 'Runtime.getRuntime().availableProcessors()' | jshell -q
java -XX:+PrintFlagsFinal -version | grep MaxHeapSize 

8589934592 bytes happens to be exactly 8 GB, that is, 8 * 1,024^3. Given that we don't specify any max heap size for the 
JVM using the -Xmx parameter, the JVM will set the max value to one quarter of the available memory. 
Since my laptop has 32 GB of memory and 32/4=8, this is also as expected!

java -Xmx200m -XX:+PrintFlagsFinal -version | grep MaxHeapSize