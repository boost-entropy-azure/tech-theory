The first step is to upload your certificate as a secret to Kubernetes:

kubectl create secret tls ssl --cert=server.crt --key=server.key
Once you have uploaded your certificate as a secret you need to create an nginx configuration to serve SSL:

events {
  worker_connections  1024;
}

http {
  server {
    listen 443 ssl;
    server_name my-domain.com www.my-domain.com;
    ssl on;
    ssl_certificate         /etc/certs/tls.crt;
    ssl_certificate_key     /etc/certs/tls.key;
    location / {
        proxy_pass http://varnish-service:80;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
    }
  }
}

As with Varnish, you need to transform this into a ConfigMap object:

kubectl create configmap nginx-conf --from-file=nginx.conf
Now that you have a secret and an nginx configuration, it is time to create the replicated, stateless nginx layer:

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ssl
spec:
  replicas: 4
  template:
    metadata:
      labels:
        app: nginx-ssl
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 443
        volumeMounts:
        - name: conf
          mountPath: /etc/nginx
        - name: certs
          mountPath: /etc/certs
      volumes:
      - name: conf
        configMap:
          # This is the ConfigMap for nginx we created previously
          name: nginx-conf
      - name: certs
        secret:
          # This is the secret we created above
          secretName: ssl
To create the replicated nginx servers, you use:

kubectl create -f nginx-deploy.yaml
Finally, you can expose this nginx SSL server with a service:

kind: Service
apiVersion: v1
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx-ssl
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 443
      targetPort: 443
To create this load-balancing service run:

kubectl create -f nginx-service.yaml
If you create this service on a Kubernetes cluster that supports external load balancers, this will create an externalized, public service that services traffic on a public IP address.

To get this IP address, you can run:

kubectl get services
You should then be able to access the service with your web browser.