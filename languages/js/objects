Defining properties & object ops(How things happen):
-----------------------------------------------------

When a property is first added to an object, JavaScript uses an internal method called [[Put]] on the object. 
The [[Put]] method creates a spot in the object to store the property. 
You can compare this to adding a key to a hash table for the first time. This operation specifies not just the initial value, 
but also some attributes of the property. So, in the previous example, when the name and age properties are first defined on each 
object, the [[Put]] method is invoked for each.

The result of calling [[Put]] is the creation of an own property on the object. An own property simply indicates that the 
specific instance of the object owns that property. The property is stored directly on the instance, and all operations on 
the property must be performed through that object.

When a new value is assigned to an existing property, a separate operation called [[Set]] takes place. 
This operation replaces the current value of the property with the new one. 
In the previous example, setting name to a second value results in a call to [[Set]]


How do you check if property exists in object?
----------------------------------------------
"name" in person1

you might want to check for the existence of a property only if it is an own property?
-----------------------------------------------------------------------------------------
person1.hasOwnProperty("name")

Removing objects:
-----------------
The delete operator works on a single object property and calls an internal operation named [[Delete]].

delete person1.name;  

Enumeration/for-in-loop:
------------------------
By default, all properties that you add to an object are enumerable, which means that you can iterate over them using a for-in loop.
Enumerable properties have their internal [[Enumerable]] attributes set to true. The for-in loop enumerates all enumerable 
properties on an object,assigning the property name to a variable.

var property;

for (property in object) {
    console.log("Name: " + property);
    console.log("Value: " + object[property]);
}

Check if property is enumerable: person1.propertyIsEnumerable("name")


Many native properties are not enumerable by default.

Difference between for-in-loop and enum:
-----------------------------------------
There is a difference between the enumerable properties returned in a for-in loop and the ones returned by Object.keys(). 
The for-in loop also enumerates prototype properties, while Object.keys() returns only own (instance) properties.

Types of Properties:
--------------------
There are two different types of properties: data properties and accessor properties. Data properties contain a value, 
like the name property from earlier examples in this chapter. The default behavior of the [[Put]] method is to create a 
data property, and every example up to this point in the chapter has used data properties. Accessor properties don’t contain 
a value but instead define a function to call when the property is read (called a getter), and a function to call when the 
property is written to (called a setter). 
Accessor properties only require either a getter or a setter, though they can have both.


There is a special syntax to define an accessor property using an object literal:

  var person1 = {
❶     _name: "Nicholas",

❷     get name() {
          console.log("Reading name");
          return this._name;
      },

❸     set name(value) {
          console.log("Setting name to %s", value);
          this._name = value;
      }
  };

  console.log(person1.name);    // "Reading name" then "Nicholas"

  person1.name = "Greg";
  console.log(person1.name);    // "Setting name to Greg" then "Greg"

  You don’t need to define both a getter and a setter; you can choose one or both. 
  If you define only a getter, then the property becomes read-only, and attempts to write to 
  it will fail silently in nonstrict mode and throw an error in strict mode. If you define only a setter, 
  then the property becomes write-only, and attempts to read the value will fail silently in both strict and nonstrict modes.

 Accessor properties are most useful when you want the assignment of a value to trigger some sort of behavior, 
 or when reading a value requires the calculation of the desired return value.


COMMON ATTRIBUTES:
-------------------
There are two property attributes shared between data and accessor properties. One is [[Enumerable]], which determines 
whether you can iterate over the property. The other is [[Configurable]], which determines whether the property can be changed. 
You can remove a configurable property using delete and can change its attributes at any time. (This also means configurable 
properties can be changed from data to accessor properties and vice versa.) 
By default, all properties you declare on an object are both enumerable and configurable.


change property attributes, you can use the Object.defineProperty()

his method accepts three arguments: the object that owns the property, the property name, and a property descriptor object 
containing the attributes to set. The descriptor has properties with the same name as the internal attributes but without 
the square brackets. So you use enumerable to set [[Enumerable]], and configurable to set [[Configurable]]

Object.defineProperty(person1, "name", {
    enumerable: false
});

Object.defineProperty(person1, "name", {
    configurable: false
});

When JavaScript is running in strict mode, attempting to delete a nonconfigurable property results in an error. 
In nonstrict mode, the operation silently fails.

DATA PROPERTY ATTRIBUTES:
---------------------------
Data properties possess two additional attributes that accessors do not. The first is [[Value]], 
which holds the property value. This attribute is filled in automatically when you create a property on an object. 
All property values are stored in [[Value]], even if the value is a function.

The second attribute is [[Writable]], which is a Boolean value indicating whether the property can be written to. 
By default, all properties are writable unless you specify otherwise.

doesn’t exist, a new one is added with the attributes specified in the descriptor. 
In this case, name isn’t already a property of person1, so it is created.

//Ultimate
Object.defineProperty(person1, "name", {
    value: "Nicholas",
    enumerable: true,
    configurable: true,
    writable: true
});


Preventing Extension:
----------------------
----------------------

1) Freezing object: (Be sure to use strict mode)
---------------
If an object is frozen, you can’t add or remove properties, you can’t change properties’ types, 
and you can’t write to any data properties. In essence, a frozen object is a sealed object where data properties are also read-only.

Object.freeze(person1);


2) Sealing object: (Be sure to use strict mode)
--------------- 

The second way to create a nonextensible object is to seal the object. A sealed object is nonextensible, 
and all of its properties are nonconfigurable. That means not only can you not add new properties to the object, 
but you also can’t remove properties or change their type (from data to accessor or vice versa). 
If an object is sealed, you can only read from and write to its properties.

You can use the Object.seal() method on an object to seal it. When that happens, the [[Extensible]] attribute is set to false, 
and all properties have their [[Configurable]] attribute set to false. 
You can check to see whether an object is sealed using Object.isSealed()

console.log(Object.isExtensible(person1));      // true
console.log(Object.isSealed(person1));          // false


Object.seal(person1);


3) Prevent Extension/extensible:(Be sure to use strict mode)
--------------------------------

Objects, just like properties, have internal attributes that govern their behavior. 
One of these attributes is [[Extensible]], which is a Boolean value indicating if the object itself can be modified. 
All objects you create are extensible by default, meaning new properties can be added to the object at any time. 
You’ve seen this several times in this chapter. 
By setting [[Extensible]] to false, you can prevent new properties from being added to an object.


One way to create a nonextensible object is with Object.preventExtensions(). This method accepts a single argument, 
which is the object you want to make nonextensible. Once you use this method on an object, you’ll never be able to add 
any new properties to it again. You can check the value of [[Extensible]] by using Object.isExtensible().


Object.preventExtensions(person1);
Object.isExtensible(person1)


RETRIEVING PROPERTY ATTRIBUTES of an object:
----------------------------------------------
var person1 = {
    name: "Nicholas"
};

var descriptor = Object.getOwnPropertyDescriptor(person1, "name");

console.log(descriptor.enumerable);     // true
console.log(descriptor.configurable);   // true
console.log(descriptor.writable);       // true
console.log(descriptor.value);          // "Nicholas"

DEFINING MULTIPLE PROPERTIES:
------------------------------
Object.defineProperties(person1, {

❶     // data property to store data
      _name: {
          value: "Nicholas",
          enumerable: true,
          configurable: true,
          writable: true
      },
❷     // accessor property
      name: {
          get: function() {
              console.log("Reading name");
              return this._name;
          },
          set: function(value) {
              console.log("Setting name to %s", value);
              this._name = value;
          },
          enumerable: true,
          configurable: true
      }
  });

ACCESSOR PROPERTY ATTRIBUTES:
-----------------------------
Accessor properties also have two additional attributes. Because there is no value stored for accessor properties, 
there is no need for [[Value]] or [[Writable]]. Instead, accessors have [[Get]] and [[Set]], which contain the 
getter and setter functions, respectively. As with the object literal form of getters and setters, you need only 
define one of these attributes to create the property.
var person1 = {
    _name: "Nicholas",

    get name() {
        console.log("Reading name");
        return this._name;
    },

    set name(value) {
        console.log("Setting name to %s", value);
        this._name = value;
    }
};

defining properties for it:

var person1 = {
    _name: "Nicholas"
};


Object.defineProperty(person1, "name", {
    get: function() {
        console.log("Reading name");
        return this._name;
    },
    set: function(value) {
        console.log("Setting name to %s", value);
        this._name = value;
    },
    enumerable: true,
    configurable: true
});