Syntax:
------
public enum BOOK {HORROR, FICTION}

- BOOK.values() -> Returns array containing all values
- BOOK.valuesOf() -> Returns the value that corresponds to a string.This is case sensitive.



- They are static and final
- for (BookGenre book: BookGenre.values()){

}

Custom values corresponding to enum:
----------------------------------------
enum BookGenre{
 BIOGRAPHY(12),
 HORROR(15);

 private BookGenre(int minAgeToRead){
     this.mingAgeToRead= minAgeToRead;
 }

 private int mingAgeToRead;

 public int getMinAgeToRead(){
     return mingAgeToRead;
 }
}

Nested classes:
-----------------
public class Book{


enum BookGenre{
 BIOGRAPHY(12){
     boolean isKidFriendly(int age){ //Approach 1
         return age >=minAgeToRead
     }
 },
 HORROR(15);

 abstract boolean isKidFriendly(int age)

 private BookGenre(int minAgeToRead){
     this.mingAgeToRead= minAgeToRead;
 }

 protected int minAgeToRead; //Make this private as well

 public int getMinAgeToRead(){
     return mingAgeToRead;
 }

 public boolean isKidFriendly(int age){ //Approach 2
     switch(this){
         case BIOGRAPHY: return age >=minAgeToRead;
     }
     return false;
 }
}

}


Enum style:
-----------
public enum CoffeeType{
   
   ESPRESSO(7,8),
   LATTE(7,227)

   private final int requiredBeans;
   private final int requiredMilk;

   Coffeetype(int requiredBeans, int requiredMilk){
       this.requiredBeans = requiredBeans;
       this.requiredMilk= requiredMilk;
   }

   public int getRequiredBeans(){return requiredBeans;}
   public int getRequiredMilk(){return requiredMilk;}

}