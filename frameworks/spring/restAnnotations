https://learning.oreilly.com/library/view/enterprise-java-microservices/9781617294242/kindle_split_011.html

@JsonInclude(value = Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)



@RestController
@RequestMapping("/orders")

@PostMapping                                             
public ResponseEntity<Order> placeOrder(@RequestBody Order order) {

    String orderId = UUID.randomUUID().toString();



//Enabling security
@EnableResourceServer

@EnableWebSecurity
@RestController
@RequestMapping("/orders")
public class OrderProcessingService extends WebSecurityConfigurerAdapter {
}


Filter code:
------------
@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {

private static final String SECURED_READ_SCOPE =
                                   "#oauth2.hasScope('read')";

private static final String SECURED_WRITE_SCOPE =
                                   "#oauth2.hasScope('write')";

private static final String SECURED_PATTERN_WRITE = "/orders/**";

private static final String SECURED_PATTERN_READ = "/orders/{id}";

@Override
public void configure(HttpSecurity http) throws Exception {

http.requestMatchers()
.antMatchers(SECURED_PATTERN_WRITE).and().authorizeRequests()
.antMatchers(HttpMethod.POST,SECURED_PATTERN_WRITE)
.access(SECURED_WRITE_SCOPE)
.antMatchers(HttpMethod.GET,SECURED_PATTERN_READ)
.access(SECURED_READ_SCOPE);
}

@Override
public void configure(ResourceServerSecurityConfigurer resources) {
       resources.resourceId("sample-oauth");
}


Response entity:
----------------
- return ResponseEntity.status(INTERNAL_SERVER_ERROR).build()   
- return ResponseEntity.ok(response);