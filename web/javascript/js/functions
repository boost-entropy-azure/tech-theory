- The [[Call]] property is unique to functions and indicates that the object can be executed.

- Function declaration: Function declarations are hoisted to the top of the context

function add(num1, num2) {
    return num1 + num2;
}

- function expression:Not hoisted
var add = function(num1, num2) {
    return num1 + num2;
};

- Parameters: (Arguments)
-------------
Another unique aspect of JavaScript functions is that you can pass any number of parameters to any function without causing an error. 
That’s because function parameters are actually stored as an array-like structure called arguments.

- The arguments object is not an instance of Array and therefore doesn’t 
have the same methods as an array; Array.isArray(arguments) always returns false.

- however, using arguments is actually more effective than naming parameters. For instance, suppose you want to create a function 
that accepts any number of parameters and returns their sum. You can’t use named parameters 
because you don’t know how many you will need, so in this case, using arguments is the best option.

- A lack of function signatures also means a lack of function overloading.
Mimicing function overloading:

function sayMessage(message) {

    if (arguments.length === 0) {
        message = "Default message";
    }

    console.log(message);
}

sayMessage("Hello!")


- this keyword:
---------------
var person = {
    name: "Nicholas",
    sayName: function() {
        console.log(this.name);
    }
};


- call method:
--------------
function sayNameForAll(label) {
    console.log(label + ":" + this.name);
}

var person1 = {
    name: "Nicholas"
};

var person2 = {
    name: "Greg"
};

var name = "Michael";

sayNameForAll.call(this, "global");        // outputs "global:Michael"
sayNameForAll.call(person1, "person1");    // outputs "person1:Nicholas"
sayNameForAll.call(person2, "person2");    // outputs "person2:Greg"

- apply method:
---------------
The apply() method works exactly the same as call() except that it accepts only two parameters: the value for this and an 
array or array-like object of parameters to pass to the function (that means you can use an arguments object as the second parameter). 
So, instead of individually naming each parameter using call(),
you can easily pass arrays to apply() as the second argument. Otherwise, call() and apply() behave identically. 

function sayNameForAll(label) {
    console.log(label + ":" + this.name);
}

var person1 = {
    name: "Nicholas"
};

var person2 = {
    name: "Greg"
};

var name = "Michael";

sayNameForAll.apply(this, ["global"]);      // outputs "global:Michael"
sayNameForAll.apply(person1, ["person1"]);  // outputs "person1:Nicholas"
sayNameForAll.apply(person2, ["person2"]);  // outputs "person2:Greg"

This code takes the previous example and replaces call() with apply(); the result is exactly the same. 
The method you use typically depends on the type of data you have. 
If you already have an array of data, use apply(); if you just have individual variables, use call().

- bind method:
---------------

The first argument to bind() is the this value for the new function. All other arguments represent named parameters 
that should be permanently set in the new function. 
You can still pass in any parameters that aren’t permanently set later.
function sayNameForAll(label) {
      console.log(label + ":" + this.name);
  }

  var person1 = {
      name: "Nicholas"
  };

  var person2 = {
      name: "Greg"
  };

  // create a function just for person1
 var sayNameForPerson1 = sayNameForAll.bind(person1);
  sayNameForPerson1("person1");       // outputs "person1:Nicholas"

  // create a function just for person2
var sayNameForPerson2 = sayNameForAll.bind(person2, "person2");
  sayNameForPerson2();                // outputs "person2:Greg"

  // attaching a method to an object doesn't change 'this'
person2.sayName = sayNameForPerson1;
  person2.sayName("person2");         // outputs "person2:Nicholas"

No parameters are bound for sayNameForPerson1() ❶, so you still need to pass in the label for the output. 
The function sayNameForPerson2() not only binds this to person2 but also binds the first parameter as "person2" ❷. 
That means you can call sayNameForPerson2() without passing in any additional arguments. The last part of this example adds 
sayNameForPerson1() onto person2 with the name sayName ❸. The function is bound, so the value of this doesn’t change even though 
sayNameForPerson1 is now a function on person2. The method still outputs the value of person1.name.
