Here is the basic flow of token-based authentication:

1)The client sends a request to the server with a username/password.
2)The application validates the credentials and generates a secure, signed token for the client.
3)The token is sent back to the client and stored there.
4)When the client needs to access something new on the server, it sends the token through the HTTP header.
5)The server decodes and verifies the attached token. If it is valid, the server sends a response to the client.
6)When the client logs out, the token is destroyed.

Helpful in Authorization:
------------------------
Within the token payload, you can easily specify what resources a user can access. For example, 
if a third-party API wants to access my Gmail account then I can provide a token that will allow that 
API to collect only my contact information from Gmail. 
It will not be able to access other resources.

Types of token:
---------------

1) Access Tokens:

Access tokens are used to grant access to a protected resource. When a client first authenticates it is 
given both types of tokens, but the access token is set to expire after a short period. By doing this, 
even if someone manages to get access to your token, it can be used only for some time.

2) Refresh token:

Refresh tokens are used to obtain a new access token when the current access token becomes invalid or expires, 
or to obtain additional access tokens with an identical or narrower scope. It does not need the credential 
information again.The refresh token is also valid for some duration, but it is much more than an access token.

Note: Although the refresh token does not need the userâ€™s credentials again to generate an access token, 
it still requires the client id and client secret (we will look at these terms in OAuth lessons). 
So even if attackers get a refresh token, they will not be able to get the access token.