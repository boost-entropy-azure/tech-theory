- Refresh tokens are usually subject to strict storage requirements to ensure they are not leaked. 
They can also be blacklisted by the authorization server.

How it works?
-------------
1) If the client already has a refresh token, then it can exchange the refresh token for a new access token by 
making the HTTP POST request to the authorization server.

The following parameters will be sent with the request:

grant_type: The value for this flow is refresh_token.
refresh_token: The client id.
client_id: The client id.
client_secret: The client secret.

POST /oauth/v2/accessToken HTTP/1.1
Host: authserver.dummy.com
Content-Type: application/x-www-form-urlencoded
 
grant_type=refresh_token
&refresh_token=k3hjJE5x1lZh-zjU-02w8EJW6l2jnuP8F1uXMgkm8nzjPfnaJR
&client_id=12345
&client_secret=hhdHFgggdFGfhd


2) If the client credentials are valid and the refresh token has not expired, then an access token is returned.

POST /token/endpoint HTTP/1.1
 
  Host: authserver.dummy.com
 
  "access_token": "dgfYTGFVygPtyqytVfyGFtyF",
  "expires_in": 3600,
  "refresh_token": "GHcdkHJjcbhhBHJGbhjfgkHghB",
  "refresh_token_expires_in": 500000


Which flow doesn't allow refersh toekn grant type:

Implicit grant type - In this grant type, the client is not able to store the client_secret. We can’t expect 
that it will be able to store the refresh token, which is highly confidential. Therefore, this flow doesn’t support 
refresh token grant flow.

Client credentials grant type - In this grant type there is no user, so the need for refresh token doesn’t arise.
 The client can just send its client id and client secret to get the access token.