- In 1994, Netscape Communications enhanced HTTP with some encryption. 
They introduced a new encryption protocol named Secure Socket Layer (SSL) and added it on top of HTTP. 
This combination of HTTP and SSL is called HTTPS (HTTP Secure).

- In 1999, Transport Layer Security (TLS) protocol was introduced. This was more efficient than the SSL protocol, 
so SSL is no longer used.


Benefits of using HTTPS instead of HTTP:
-----------------------------------------
1) Authenticity #
HTTPS ensures that the client is talking to the intended website. It is not possible for an attacker 
to respond to the client’s requests. 
In HTTPS, the website provides its identity to the client.

2) Confidentiality #
HTTPS ensures that the data that is being transferred between the client and server is secure and an attacker 
cannot read it. This is achieved by encrypting the data in HTTPS.

3) Message Integrity #
HTTPS ensures that the data is not modified by an attacker while it is being transferred over the Internet. 
It gives the client and server a way to verify that the data has not been tampered with.


How does it work:
------------------

- TLS handshake: In HTTPS, before transferring any data, the client first verifies that the server it is 
talking to is the correct server and how the data will be encrypted. 

- Cipher suites: is a set of encryption algorithms that are supported by the client. 
The client and server need to agree upon which cipher suite will be used for each handshake.

- The client browser has a trust store where it stores certificates 
from some of the most popular Certificate Authorities.

The exact steps within a TLS handshake will vary depending upon the kind of 
key exchange algorithm used and the cipher suites supported by both sides.

Secure exchange of the secret #
Variations of the Diffie-Hellman key exchange protocol are used instead. This ensures parties without prior knowledge 
can establish a shared secret without anyone else being able to sniff it. 

Now, we will look at each step of the TLS Handshake with TLS 1.2 and the RSA algorithm:
---------------------------------------------------------------------------------------
Step 1 -> The ‘client hello’ message #
The client initiates the handshake by sending a “hello” message to the server. The message will include:

The TLS version the client supports.
The cipher suites supported.
A string of random bytes known as the client random.


Step 2 -> The ‘server hello’ message #
If the capabilities of the client and server match, then it replies to the client with the following information:

The cipher suite it has selected for communication.
An SSL Certificate.
A randomly selected prime number is called a server random

Step 3 -> Certificate Validation #
The client verifies that the SSL certificate provided by the server is valid. 
The client verifies the following properties of the certificate:

The certificate’s digital signature.
The certificate has not expired or revoked.
The certificate contains the correct domain name.


Step 4 -> Pre-master secret #
The client generates a random string of bytes called a pre-master secret. 
The client encrypts it with the server’s public key and transmits it to the server. The client gets 
the server’s public key from the SSL certificate.

The client encrypts the pre-master secret with the server’s public key. This can be decrypted with only 
a private key which is present with the server.

Step 5 -> Session Key creation #
Now both the client and the server calculate the session key using the client random, server random, 
and the pre-master secret. They both will obtain the same session key.

Step 6 -> Client Finished #
The client sends a finished message encrypted by the session key.

Step 7 -> Server Finished #
The server sends the finished message encrypted by the session key.

Step 8 -> Symmetric encryption successful #
Now the client and the server will encrypt their messages with the same session key. 
Secure communication is achieved.


Things invovled in https;

Public key certificates #
In order to verify who you’re talking to, HTTPS uses Public Key Certificates that state the identity behind a particular server. When you connect to an IP address via HTTPS, the server behind that address will present you its certificate for you to verify their identity. Going back to our analogy, this could simply be you asking your significant other to tell you their social security number. Once you verify that the number is correct, you gain an additional level of trust.

This does not prevent attackers from learning the victim’s social security number, stealing your partner’s smartphone and calling you. How do we verify the identity of the caller?

Certificate authority #
Rather than directly asking your partner to say their social security number, you make a phone call to your mom who happens to live next door and you ask her to go to your apartment to make sure your partner is saying their social security number. This adds an additional level of trust, as you do not consider your mom a threat and rely on her to verify the identity of the caller.

In HTTPS terms your mom is called a CA, or Certificate Authority. A CA’s job is to verify the identity behind a particular server and issue a certificate with its own digital signature. This means that, when I connect to a particular domain, I will be presented with a certificate generated by the CA and not the domain’s owner, called a self-signed certificate.

An authority’s job is to make sure they verify the identity behind a domain and issue a certificate accordingly. When you order a certificate, commonly called an SSL certificate, the authority might give you a phone call or ask you to change a DNS setting in order to verify you’re in control of the domain in question. Once the verification process is complete, it will issue the certificate that you can then install on your webservers.

Clients will then connect to your servers and be presented with this certificate so that they can verify it is genuine. Browsers have relationship with CAs, in the sense that they keep track of a list of trusted CAs in order to verify that the certificate is in fact trustworthy. If a certificate is not signed by a trusted authority, the browser will display an informative warning to the users.



https://blog.hartleybrody.com/https-certificates/
https://robertheaton.com/2014/03/27/how-does-https-actually-work/
https://en.wikipedia.org/wiki/9_Algorithms_That_Changed_the_Future

https://www.troyhunt.com/heres-why-your-static-website-needs-https/

https://scotthelme.co.uk/tls-conundrum-and-leaving-cloudflare/


HSTS:
----
You might be wondering what happens the first time a user visits your website, as there is no HSTS policy defined beforehand. 
Attackers could potentially trick the user to the http:// version of your website and perpetrate their attack there, 
so there’s still room for problems. That’s a valid concern, as HSTS is a trust on first use mechanism. It tries to make 
sure that once you’ve visited a website, the browser knows that subsequent interactions must use HTTPS.

A way around this shortcoming would be to maintain a huge database of websites that enforce HSTS, something that Chrome 
does through hstspreload.org. You must set your policy then visit the website to check whether it’s eligible to be added 
to the database.

Why HTTP Public Key Pinning? #:HPKP
-----------------------------------
HTTP Public Key Pinning (abbr. HPKP) is a mechanism that allows us to advertise which SSL certificates to expect when a browser connects to our servers. It is a trust on first use header, just like HSTS, meaning that, once the client connects to our server, it will store the certificate’s info for subsequent interactions.

If at any point in time the client detects that another certificate is being used by the server, it will politely refuse to connect, rendering man in the middle (MITM) attacks very hard to pull off.

This is what an HPKP policy looks like:

Public-Key-Pins:
  pin-sha256="9yw7rfw9f4hu9eho4fhh4uifh4ifhiu=";
  pin-sha256="cwi87y89f4fh4fihi9fhi4hvhuh3du3=";
  max-age=3600; includeSubDomains;
  report-uri="https://pkpviolations.example.org/collect"
HPKP is dangerous #
The header advertises what certificates the server will use (in this case it’s two of them) using a hash of the certificates. 
It includes additional information like the time-to-live of this directive (max-age=3600), and a few other details. Sadly, there’s 
no point in digging deeper to understand what we can do with public key pinning, as this feature is being deprecated by Chrome, 
a signal that its adoption is destined to plummet very soon.

Chrome’s decision is not irrational, it is simply a consequence of the risks associated with public key pinning. 
If you lose your certificate, or simply make a mistake while testing, your website is gone for the duration of the max-age directive, 
which is typically weeks or months. As a result of these potentially catastrophic consequences, adoption of HPKP has been extremely 
low, and there have been incidents where big-time websites have been unavailable because of a misconfiguration.

All things considered, Chrome decided users were better off without the protection offered by HPKP, and security 
researchers aren’t entirely against this decision.

ℹ️ HPKP gone wrong
Smashing Magazine, a leading website in the field of web design, documented its disastrous experience with HPKP in a 
blog post in late 2016.

Long story short, the website was unavailable, due to a misconfiguration in their Public-Key-Pins header. 
When their SSL certificate expired, they had no way to issue a new certificate that would not violate their previously set HPKP policy. As a result, most of their users could not access the website for four days.

Moral of the story? HPKP is dangerous and even the best make mistakes.

While HPKP has been deprecated, a new header stepped in to prevent fraudulent 
SSL certificates from being served to clients, Expect-CT.



How can HPKP lead to websites shutting down?
It invalidates certificates that were not advertised so if you lose your certificate, 
or simply make a mistake while testing, your website is gone.


#Expect CT:
------------
Why Expect-CT? #
The goal of Expect-CT is to inform the browser that it should perform additional background checks to ensure the certificate 
is genuine. When a server uses the Expect-CT header, it is requesting the client to verify that the certificates being used 
are present in public Certificate Transparency (CT) logs.

The Certificate Transparency initiative is an effort led by Google in order to:

[provide] an open framework for monitoring and auditing SSL certificates in nearly real time.

Specifically, Certificate Transparency makes it possible to detect SSL certificates that have been mistakenly issued by a 
certificate authority or maliciously acquired from an otherwise unimpeachable certificate authority. It also makes it possible 
to identify certificate authorities that have gone rogue and are maliciously issuing certificates.

certificate-transparency.org

Note that a rogue server wouldn’t set the expect-ct header, putting themselves on the line. A genuine server can ask 
clients to opt-in with all subsequent requests to be validated with CT moving forward. If the client gets tricked into 
connecting to a malicious server, 
the attack will never work as the SSL certificate won’t pass the CT validation.

Sample header #
The header takes this form:

Expect-CT: max-age=3600, enforce, report-uri="https://ct.example.com/report"
In this example, the server is asking the browser to:

enable CT verification for the current app for a period of one hour (3600 seconds)
enforce this policy and prevent access to the app if a violation occurs
send a report to the given URL if a violation occurs
The Certificate Transparency initiative’s goal is to detect erroneously issued or malicious certificates 
(including rogue Certificate Authorities) earlier, faster, and more precisely than any other method before.
 By opting-in using the Expect-CT header, you can take advantage of this initiative to improve your app’s security posture.