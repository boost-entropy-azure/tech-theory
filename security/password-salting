Salts #
Since an attacker can download a table mapping hashes back to regular words, what if you 
just add a little extra text to every password? So, to store hashes of 'MyCoolSite'+password, an 
attacker needs a unique mapping table just for MyCoolSite. Better still, if every password has a unique bit of 
text, an attacker needs a new table for every password. That bit of text is called a salt.

Another benefit of salts is that hashes will be unique even when the passwords aren’t.

Another benefit of salts is that hashes will be unique even when the passwords aren’t. Consequently, when 
an attacker cracks one password, other accounts with the same password are still safe.

import hashlib
import secrets

def salted_hash(password):
    salt = secrets.token_bytes(16)
    salted_password = salt + bytes(password, 'utf-8')
    return salt.hex() + '$' + hashlib.sha256(salted_password).hexdigest()

print(salted_hash('somepassword'))


To check a salted hash, recalculate the hash with the same salt and see if the hashes match:

import hashlib
import secrets

def check_password(salted_hash, password):
    (hex_salt, correct) = salted_hash.split('$')
    salted_password = bytes.fromhex(hex_salt) + bytes(password, 'utf8')
    return hashlib.sha256(salted_password).hexdigest() == correct

print(check_password('7b866b86ba07fc5ea2d721db6296c237$8071557f5b4ba2fbd52f4f42f265bb8779cbe863254aa04dc611f3fc4826293c', 
'somepassword'))

Using salted hashes:
---------------------
import sqlite3
import hashlib
import secrets

conn = sqlite3.connect('users.db')
cursor = conn.cursor().execute('''
CREATE TABLE IF NOT EXISTS users (
    username VARCHAR(16) PRIMARY KEY,
    password VARCHAR(64)
)
''')

def create_account(username, password):
    if len(password) < 8:
        raise Exception('Password too short')

    cursor = conn.cursor()
    cursor.execute('SELECT count(*) FROM users WHERE username=?', (username,))
    result = cursor.fetchone()
    if result[0] > 0:
        raise Exception('Username already taken')

    cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, salted_hash(password)))
    conn.commit()

def salted_hash(password):
    salt = secrets.token_bytes(16)
    salted_password = salt + bytes(password, 'utf-8')
    return salt.hex() + '$' + hashlib.sha256(salted_password).hexdigest()

def login(username, password):
    cursor = conn.cursor()
    cursor.execute('SELECT password FROM users WHERE username=?', (username,))
    result = cursor.fetchone()
    if result == None or not check_password(result[0], password):
        raise Exception('Invalid username or password')

def check_password(salted_hash, password):
    (hex_salt, correct) = salted_hash.split('$')
    salted_password = bytes.fromhex(hex_salt) + bytes(password, 'utf8')
    return hashlib.sha256(salted_password).hexdigest() == correct

create_account('jimbob', 'password')

try:
    login('jimbob', 'password')
    print('Login succeeded')
except Exception as e:
    print('Login error: %s' % (e))

- The salt is inserted into the database unobfuscated. It’s not a secret, and it’s needed to verify the password. 
Therefore, prepending it to the password hash like this is fine. 
However, it doesn’t matter how the password is stored, just as long as it can be retrieved.


Hash(Hash(pwd)+secret) -> Putting hash