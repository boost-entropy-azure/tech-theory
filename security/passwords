- Go for: Single Sign-On with Active Directory.
- If you’re starting from scratch on a simple project, look at Google Sign-In or GitHub OAuth. 
For more complicated projects, consider a stand-alone app, like Keycloak, or a complete service, like Auth0. 

The best password hashing algorithm available today is Argon2, and the best implementation for Python is PyNaCl.


# Hashing passwords:
-------------------
This script hashes the plaintext passwords and removes the old values. SQLite doesn’t allow columns to be dropped, 
so this script clears the value. If you’re using a different database, 
just drop the column. Regardless of the method, make sure those passwords are completely erased.

import sqlite3
from nacl import pwhash

conn = sqlite3.connect('users.db')
cursor = conn.cursor()

print('before:')
for row in conn.cursor().execute('SELECT * FROM users'):
    print(row)

cursor.execute('ALTER TABLE users ADD COLUMN nacl_pwhash VARCHAR(100)')

params = []
for row in cursor.execute('SELECT password, username FROM users WHERE password != ""'):
    params.append(
        (pwhash.str(bytes(row[0], 'UTF-8')), row[1]),
    )

cursor.executemany('UPDATE users SET nacl_pwhash=?, password="" WHERE username=?', params)
conn.commit()

print('after:')
for row in conn.cursor().execute('SELECT * FROM users'):
    print(row)


PyNaCl’s two-way encryption algorithms to encrypt and decrypt a password:
-------------------------------
import sqlite3
import nacl.secret

conn = sqlite3.connect('users.db')
cursor = conn.cursor().execute('''
CREATE TABLE IF NOT EXISTS users (
    username VARCHAR(16) PRIMARY KEY,
    password VARCHAR(100)
)
''')

def create_account(username, password):
    if len(password) < 8:
        raise Exception('Password too short')

    if len(password) > 16:
        raise Exception('Password too long')

    cursor = conn.cursor()
    cursor.execute('SELECT count(*) FROM users WHERE username=?', (username,))
    result = cursor.fetchone()
    if result[0] > 0:
        raise Exception('Username already taken')

    encrypted = encrypt_password(password)
    cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, encrypted))
    conn.commit()

def login(username, password):
    cursor = conn.cursor()
    cursor.execute("SELECT password FROM users WHERE username=?", (username,))
    result = cursor.fetchone()
    if result == None:
        raise Exception('Invalid username or password')

    decrypted = decrypt_password(result[0])
    if decrypted != password:
        raise Exception('Invalid username or password')

key = b'this is a super-duper secret key'

def encrypt_password(plaintext):
    box = nacl.secret.SecretBox(key)
    return box.encrypt(bytes(plaintext, 'utf-8')).hex()

def decrypt_password(ciphertext):
    box = nacl.secret.SecretBox(key)
    bc = bytes.fromhex(ciphertext)
    return box.decrypt(bc).decode('utf-8')

create_account('jim', 'a-password')
create_account('sue', 'another-password')

try:
    login('jim', 'a-password')
    print('Login succeeded')
except Exception as e:
    print('Login error: %s' % (e))

#Decrypt and hash password:
---------------------------
import sqlite3
from nacl import pwhash, secret

conn = sqlite3.connect('users.db')
cursor = conn.cursor()

print('before:')
for row in conn.cursor().execute('SELECT * FROM users'):
    print(row)

cursor.execute('ALTER TABLE users ADD COLUMN nacl_pwhash VARCHAR(100)')

box = secret.SecretBox(b'this is a super-duper secret key')

params = []
for row in cursor.execute('SELECT password, username FROM users WHERE password != ""'):
    decrypted = box.decrypt((bytes.fromhex(row[0])))
    params.append(
        (pwhash.str(decrypted), row[1]),
    )

cursor.executemany('UPDATE users SET nacl_pwhash=?, password="" WHERE username=?', params)
conn.commit()

print('after:')
for row in conn.cursor().execute('SELECT * FROM users'):
    print(row)


Hashing:
--------
- SHA-2  is still secure.

//SHA-256 from SHA-2 family
//Python’s standard hashlib library is used to generate the hash. During account creation, 
//the hash is stored directly in the database.

import sqlite3
import hashlib

conn = sqlite3.connect('users.db')
cursor = conn.cursor().execute('''
CREATE TABLE IF NOT EXISTS users (
    username VARCHAR(16) PRIMARY KEY,
    password VARCHAR(64)
)
''')

def create_account(username, password):
    if len(password) < 8:
        raise Exception('Password too short')

    cursor = conn.cursor()
    cursor.execute('SELECT count(*) FROM users WHERE username=?', (username,))
    result = cursor.fetchone()
    if result[0] > 0:
        raise Exception('Username already taken')

    cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)',
        (username, hash_password(password)))
    conn.commit()

def login(username, password):
    cursor = conn.cursor()
    hashed = hash_password(password)
    cursor.execute("SELECT password FROM users WHERE username=? AND password=?",
        (username,hashed))
    result = cursor.fetchone()
    if result == None:
        raise Exception('Invalid username or password')

def hash_password(password):
    return hashlib.sha256(bytes(password, 'utf-8')).hexdigest()

create_account('bob', 'password')
create_account('sally', 'password')
create_account('jim', 'superman')

try:
    login('jim', 'superman')
    print('Login succeeded')
except Exception as e:
    print('Login error: %s' % (e))


Disadvtg of hashing:-

If an attacker cracks one password, every account with that password has been cracked. There are lists of common passwords 
on the internet. All an attacker has to do is hash the passwords in the list and find the accounts that match in the dump. 
It won’t crack every password, but it will probably crack enough, and in very little time.

Another problem is that cryptographic hashes are fast to compute on normal hardware. A GPU can make the work go faster. 
Some hash algorithms can be computed on custom hardware (ASICs), which is even faster than a GPU. A brute-force attack that 
tries every combination is becoming possible, even against strong passwords. Additionally, if computing the hashes 
it too much work, attackers can download a pre-computed list of password hashes, known as a rainbow table.

Basic plan to upgrade from encrypt to hashing:
---------------------------------------------
The basic plan is:

Make a new database column to store secure hashes
Create new accounts with the secure hash
Change the login code to use the new secure hash
Add a fallback to the login code for the old method, which also re-hashes the password

import sqlite3
import hashlib

from nacl import pwhash
from nacl.exceptions import InvalidkeyError

conn = sqlite3.connect('users.db')
cursor = conn.cursor().execute('''
CREATE TABLE IF NOT EXISTS users (
    username VARCHAR(16) PRIMARY KEY,
    password VARCHAR(64),
    nacl_pwhash VARCHAR(100)
)
''')

def create_old_account(username, password):
    if len(password) < 8:
        raise Exception('Password too short')

    cursor = conn.cursor()
    cursor.execute('SELECT count(*) FROM users WHERE username=?', (username,))
    result = cursor.fetchone()
    if result[0] > 0:
        raise Exception('Username already taken')

    cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hash_password(password)))
    conn.commit()

def login(username, password):
    cursor = conn.cursor()
    cursor.execute('SELECT password, nacl_pwhash FROM users WHERE username=?', (username,))
    result = cursor.fetchone()
    if result == None:
        pwhash.str(b'')
        raise Exception('Invalid username or password')

    if result[1]:
        # New PyNaCl hashed password exists
        try:
            pwhash.verify(result[1], bytes(password, 'UTF-8'))
        except(InvalidkeyError):
            raise Exception('Invalid username or password')
    else:
        # Old SHA-2 password hash
        if result[0] != hash_password(password):
            raise Exception('Invalid username or password')

        # The password is correct, upgrade it.
        new_hash = pwhash.str(bytes(password, 'UTF-8'))
        cursor.execute('UPDATE users SET nacl_pwhash=?, password="" WHERE username=?', (new_hash, username))
        conn.commit()

def hash_password(password):
    return hashlib.sha256(bytes(password, 'utf-8')).hexdigest()

create_old_account('bob', 'password')
create_old_account('sally', 'password')
create_old_account('jim', 'superman')

login('bob', 'password')
login('bob', 'password')

print("DB Dump:")
for row in conn.cursor().execute('SELECT * FROM users'):
    print(f'{row[0]}: sha256={row[1]}; nacl={row[2]}')


----

Password managers #
If you don’t already use a password manager, try one of these:

LastPass
1password
KeePassXC
Keeper
Alternatives #
If you decide not to build your own authentication, here are some alternatives:

Google Sign-In: Authenticates users with their Google account
GitHub OAuth: Authenticates users with their GitHub account
Keycloak: Stand-alone user management app you can run on your servers
Auth0: Stand-alone user management app running on someone else’s servers